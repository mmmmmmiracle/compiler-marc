
//----------------------------------------------------
// The following code was generated by CUP v0.11b ${cupversion} (SVN rev )
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import ast.*;
import lexer.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b ${cupversion} (SVN rev ) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CmmParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public CmmParser() {super();}

  /** Constructor which sets the default scanner. */
  public CmmParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CmmParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\003\000\002\007\004\000\002" +
    "\007\002\000\002\010\005\000\002\010\006\000\002\011" +
    "\006\000\002\012\010\000\002\013\004\000\002\013\003" +
    "\000\002\014\004\000\002\014\005\000\002\015\003\000" +
    "\002\015\005\000\002\016\004\000\002\017\006\000\002" +
    "\020\004\000\002\020\002\000\002\021\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\006\000\002\021\006" +
    "\000\002\021\012\000\002\021\017\000\002\021\012\000" +
    "\002\021\005\000\002\021\004\000\002\021\004\000\002" +
    "\022\005\000\002\023\003\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\004" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\004\000\002\023" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\005\000" +
    "\002\024\003\000\002\025\005\000\002\025\006\000\002" +
    "\026\003\000\002\026\005\000\002\027\003\000\002\027" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\014\002\ufffe\004\ufffe\005\ufffe\006\ufffe\011" +
    "\ufffe\001\002\000\014\002\000\004\010\005\011\006\013" +
    "\011\012\001\002\000\004\002\006\001\002\000\004\002" +
    "\001\001\002\000\014\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\011\ufffd\001\002\000\004\020\ufffa\001\002\000\004\020" +
    "\ufff9\001\002\000\004\020\020\001\002\000\004\020\ufff8" +
    "\001\002\000\004\020\020\001\002\000\014\002\uffff\004" +
    "\uffff\005\uffff\006\uffff\011\uffff\001\002\000\014\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\011\ufffc\001\002\000\014\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\011\ufffb\001\002\000\056" +
    "\020\ufff7\023\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051" +
    "\ufff7\052\ufff7\053\ufff7\001\002\000\006\025\024\027\022" +
    "\001\002\000\032\002\ufff4\004\ufff4\005\ufff4\006\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\024\ufff4\001\002\000\004\023\035\001\002\000\012\004" +
    "\010\005\011\006\013\026\025\001\002\000\004\023\uffee" +
    "\001\002\000\004\020\020\001\002\000\004\026\033\001" +
    "\002\000\006\026\uffec\030\031\001\002\000\010\004\010" +
    "\005\011\006\013\001\002\000\004\026\uffeb\001\002\000" +
    "\004\023\uffed\001\002\000\006\026\uffea\030\uffea\001\002" +
    "\000\030\004\ufff5\005\ufff5\006\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\016\ufff5\017\ufff5\020\ufff5\024\ufff5\001\002" +
    "\000\014\002\ufff2\004\ufff2\005\ufff2\006\ufff2\011\ufff2\001" +
    "\002\000\030\004\010\005\011\006\013\011\041\012\uffe7" +
    "\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7\024\uffe7\001" +
    "\002\000\004\020\020\001\002\000\004\020\020\001\002" +
    "\000\020\012\056\013\047\014\051\016\044\017\057\020" +
    "\053\024\055\001\002\000\030\004\ufff6\005\ufff6\006\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\024\ufff6\001\002\000\004\025\177\001\002\000\004" +
    "\025\170\001\002\000\020\012\uffe8\013\uffe8\014\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\024\uffe8\001\002\000\004\032\165" +
    "\001\002\000\012\031\130\034\162\035\161\053\131\001" +
    "\002\000\004\025\145\001\002\000\004\027\144\001\002" +
    "\000\052\025\ufff7\026\uffbf\027\uffbf\030\uffbf\031\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\001\002\000\004\027\143\001\002\000\014" +
    "\002\uffe9\004\uffe9\005\uffe9\006\uffe9\011\uffe9\001\002\000" +
    "\004\033\137\001\002\000\024\007\063\010\065\020\053" +
    "\021\073\022\071\025\074\027\070\037\060\042\072\001" +
    "\002\000\016\007\063\010\065\020\053\021\073\022\071" +
    "\025\074\001\002\000\040\026\uffcb\027\uffcb\030\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\001\002\000" +
    "\034\027\134\036\105\037\076\040\110\041\100\043\077" +
    "\044\112\045\111\046\101\047\106\050\104\051\102\052" +
    "\103\001\002\000\040\026\uffc7\027\uffc7\030\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\001\002\000\044" +
    "\026\uffca\027\uffca\030\uffca\031\130\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\052\uffca\053\131\001\002\000\040\026" +
    "\uffc6\027\uffc6\030\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\001\002\000\040\026\uffda\027\uffda\030\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\043\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\001\002" +
    "\000\040\026\uffc4\027\uffc4\030\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\001\002\000\020\012\uffdd\013" +
    "\uffdd\014\uffdd\016\uffdd\017\uffdd\020\uffdd\024\uffdd\001\002" +
    "\000\040\026\uffc8\027\uffc8\030\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\001\002\000\022\007\063\010" +
    "\065\020\053\021\073\022\071\025\074\037\060\042\072" +
    "\001\002\000\040\026\uffc9\027\uffc9\030\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\001\002\000\022\007" +
    "\063\010\065\020\053\021\073\022\071\025\074\037\060" +
    "\042\072\001\002\000\034\026\107\036\105\037\076\040" +
    "\110\041\100\043\077\044\112\045\111\046\101\047\106" +
    "\050\104\051\102\052\103\001\002\000\022\007\063\010" +
    "\065\020\053\021\073\022\071\025\074\037\060\042\072" +
    "\001\002\000\022\007\063\010\065\020\053\021\073\022" +
    "\071\025\074\037\060\042\072\001\002\000\022\007\063" +
    "\010\065\020\053\021\073\022\071\025\074\037\060\042" +
    "\072\001\002\000\022\007\063\010\065\020\053\021\073" +
    "\022\071\025\074\037\060\042\072\001\002\000\022\007" +
    "\063\010\065\020\053\021\073\022\071\025\074\037\060" +
    "\042\072\001\002\000\022\007\063\010\065\020\053\021" +
    "\073\022\071\025\074\037\060\042\072\001\002\000\022" +
    "\007\063\010\065\020\053\021\073\022\071\025\074\037" +
    "\060\042\072\001\002\000\022\007\063\010\065\020\053" +
    "\021\073\022\071\025\074\037\060\042\072\001\002\000" +
    "\022\007\063\010\065\020\053\021\073\022\071\025\074" +
    "\037\060\042\072\001\002\000\040\026\uffc5\027\uffc5\030" +
    "\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\001" +
    "\002\000\022\007\063\010\065\020\053\021\073\022\071" +
    "\025\074\037\060\042\072\001\002\000\022\007\063\010" +
    "\065\020\053\021\073\022\071\025\074\037\060\042\072" +
    "\001\002\000\022\007\063\010\065\020\053\021\073\022" +
    "\071\025\074\037\060\042\072\001\002\000\040\026\uffd3" +
    "\027\uffd3\030\uffd3\036\105\037\076\040\110\041\100\043" +
    "\077\044\uffd3\045\111\046\101\047\106\050\104\051\102" +
    "\052\103\001\002\000\024\026\uffd2\027\uffd2\030\uffd2\036" +
    "\105\037\076\040\110\041\100\043\uffd2\044\uffd2\001\002" +
    "\000\040\026\uffd7\027\uffd7\030\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\001\002\000\024\026\uffd0\027" +
    "\uffd0\030\uffd0\036\105\037\076\040\110\041\100\043\uffd0" +
    "\044\uffd0\001\002\000\040\026\uffd9\027\uffd9\030\uffd9\036" +
    "\uffd9\037\uffd9\040\110\041\100\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\001\002\000" +
    "\024\026\uffcf\027\uffcf\030\uffcf\036\105\037\076\040\110" +
    "\041\100\043\uffcf\044\uffcf\001\002\000\024\026\uffcd\027" +
    "\uffcd\030\uffcd\036\105\037\076\040\110\041\100\043\uffcd" +
    "\044\uffcd\001\002\000\024\026\uffce\027\uffce\030\uffce\036" +
    "\105\037\076\040\110\041\100\043\uffce\044\uffce\001\002" +
    "\000\024\026\uffd1\027\uffd1\030\uffd1\036\105\037\076\040" +
    "\110\041\100\043\uffd1\044\uffd1\001\002\000\040\026\uffd6" +
    "\027\uffd6\030\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043" +
    "\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\001\002\000\040\026\uffd4\027\uffd4\030\uffd4\036" +
    "\105\037\076\040\110\041\100\043\uffd4\044\uffd4\045\111" +
    "\046\101\047\106\050\104\051\102\052\103\001\002\000" +
    "\040\026\uffd8\027\uffd8\030\uffd8\036\uffd8\037\uffd8\040\110" +
    "\041\100\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\001\002\000\040\026\uffd5\027\uffd5" +
    "\030\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5" +
    "\001\002\000\004\020\020\001\002\000\022\007\063\010" +
    "\065\020\053\021\073\022\071\025\074\037\060\042\072" +
    "\001\002\000\040\026\uffdb\027\uffdb\030\uffdb\036\105\037" +
    "\076\040\110\041\100\043\077\044\112\045\111\046\101" +
    "\047\106\050\104\051\102\052\103\001\002\000\050\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\043\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\001\002" +
    "\000\020\012\uffde\013\uffde\014\uffde\016\uffde\017\uffde\020" +
    "\uffde\024\uffde\001\002\000\040\026\uffcc\027\uffcc\030\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\001\002" +
    "\000\042\026\uffca\027\uffca\030\uffca\031\130\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\052\uffca\001\002\000\004\020" +
    "\140\001\002\000\006\027\uffbf\031\uffbf\001\002\000\006" +
    "\027\142\031\130\001\002\000\020\012\uffe3\013\uffe3\014" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\024\uffe3\001\002\000\020" +
    "\012\uffdc\013\uffdc\014\uffdc\016\uffdc\017\uffdc\020\uffdc\024" +
    "\uffdc\001\002\000\020\012\uffe6\013\uffe6\014\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\024\uffe6\001\002\000\022\007\063\010" +
    "\065\020\053\021\073\022\071\025\074\037\060\042\072" +
    "\001\002\000\034\026\147\036\105\037\076\040\110\041" +
    "\100\043\077\044\112\045\111\046\101\047\106\050\104" +
    "\051\102\052\103\001\002\000\004\023\150\001\002\000" +
    "\030\004\ufff5\005\ufff5\006\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\016\ufff5\017\ufff5\020\ufff5\024\ufff5\001\002\000" +
    "\030\004\010\005\011\006\013\011\041\012\uffe7\013\uffe7" +
    "\014\uffe7\016\uffe7\017\uffe7\020\uffe7\024\uffe7\001\002\000" +
    "\020\012\056\013\047\014\051\016\044\017\057\020\053" +
    "\024\153\001\002\000\022\012\uffe1\013\uffe1\014\uffe1\015" +
    "\154\016\uffe1\017\uffe1\020\uffe1\024\uffe1\001\002\000\004" +
    "\023\155\001\002\000\030\004\ufff5\005\ufff5\006\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\024\ufff5\001\002\000\030\004\010\005\011\006\013\011" +
    "\041\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\024\uffe7\001\002\000\020\012\056\013\047\014\051\016" +
    "\044\017\057\020\053\024\160\001\002\000\020\012\uffe0" +
    "\013\uffe0\014\uffe0\016\uffe0\017\uffe0\020\uffe0\024\uffe0\001" +
    "\002\000\004\027\164\001\002\000\004\027\163\001\002" +
    "\000\020\012\uffe5\013\uffe5\014\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\024\uffe5\001\002\000\020\012\uffe4\013\uffe4\014\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\024\uffe4\001\002\000\022\007" +
    "\063\010\065\020\053\021\073\022\071\025\074\037\060" +
    "\042\072\001\002\000\034\027\167\036\105\037\076\040" +
    "\110\041\100\043\077\044\112\045\111\046\101\047\106" +
    "\050\104\051\102\052\103\001\002\000\020\012\uffe2\013" +
    "\uffe2\014\uffe2\016\uffe2\017\uffe2\020\uffe2\024\uffe2\001\002" +
    "\000\024\007\063\010\065\020\053\021\073\022\071\025" +
    "\074\026\173\037\060\042\072\001\002\000\036\026\uffc1" +
    "\030\uffc1\036\105\037\076\040\110\041\100\043\077\044" +
    "\112\045\111\046\101\047\106\050\104\051\102\052\103" +
    "\001\002\000\006\026\175\030\174\001\002\000\040\026" +
    "\uffc3\027\uffc3\030\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\001\002\000\022\007\063\010\065\020\053" +
    "\021\073\022\071\025\074\037\060\042\072\001\002\000" +
    "\040\026\uffc2\027\uffc2\030\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\001\002\000\036\026\uffc0\030\uffc0" +
    "\036\105\037\076\040\110\041\100\043\077\044\112\045" +
    "\111\046\101\047\106\050\104\051\102\052\103\001\002" +
    "\000\022\007\063\010\065\020\053\021\073\022\071\025" +
    "\074\037\060\042\072\001\002\000\034\026\201\036\105" +
    "\037\076\040\110\041\100\043\077\044\112\045\111\046" +
    "\101\047\106\050\104\051\102\052\103\001\002\000\004" +
    "\023\202\001\002\000\030\004\ufff5\005\ufff5\006\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\024\ufff5\001\002\000\030\004\010\005\011\006\013\011" +
    "\041\012\uffe7\013\uffe7\014\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\024\uffe7\001\002\000\020\012\056\013\047\014\051\016" +
    "\044\017\057\020\053\024\205\001\002\000\020\012\uffdf" +
    "\013\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf\024\uffdf\001" +
    "\002\000\004\020\020\001\002\000\004\027\210\001\002" +
    "\000\032\002\ufff3\004\ufff3\005\ufff3\006\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\016\ufff3\017\ufff3\020\ufff3\024\ufff3" +
    "\001\002\000\004\027\022\001\002\000\006\020\020\023" +
    "\213\001\002\000\012\004\010\005\011\006\013\011\041" +
    "\001\002\000\014\004\010\005\011\006\013\011\041\024" +
    "\217\001\002\000\014\004\uffef\005\uffef\006\uffef\011\uffef" +
    "\024\uffef\001\002\000\014\004\ufff0\005\ufff0\006\ufff0\011" +
    "\ufff0\024\ufff0\001\002\000\004\027\220\001\002\000\014" +
    "\002\ufff1\004\ufff1\005\ufff1\006\ufff1\011\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\006\002\004\003\003\001\001\000\014\004" +
    "\014\005\013\010\006\011\015\012\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\211\001\001\000\002" +
    "\001\001\000\004\006\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\022\001\001\000\002\001\001\000\004\017\035\001" +
    "\001\000\010\005\025\015\026\016\027\001\001\000\002" +
    "\001\001\000\004\006\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\025\015\031\016\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\036\001\001\000\002\001\001\000\010\005\037" +
    "\010\042\020\041\001\001\000\004\006\210\001\001\000" +
    "\004\006\205\001\001\000\014\006\044\021\045\022\051" +
    "\025\053\027\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\006\044\022\065\023\061\024\060\025" +
    "\066\027\063\001\001\000\012\006\044\024\134\025\066" +
    "\027\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\044\022\065\023\126\024\060\025\066" +
    "\027\063\001\001\000\002\001\001\000\016\006\044\022" +
    "\065\023\074\024\060\025\066\027\063\001\001\000\002" +
    "\001\001\000\016\006\044\022\065\023\125\024\060\025" +
    "\066\027\063\001\001\000\016\006\044\022\065\023\124" +
    "\024\060\025\066\027\063\001\001\000\016\006\044\022" +
    "\065\023\123\024\060\025\066\027\063\001\001\000\016" +
    "\006\044\022\065\023\122\024\060\025\066\027\063\001" +
    "\001\000\016\006\044\022\065\023\121\024\060\025\066" +
    "\027\063\001\001\000\016\006\044\022\065\023\120\024" +
    "\060\025\066\027\063\001\001\000\016\006\044\022\065" +
    "\023\117\024\060\025\066\027\063\001\001\000\016\006" +
    "\044\022\065\023\116\024\060\025\066\027\063\001\001" +
    "\000\016\006\044\022\065\023\115\024\060\025\066\027" +
    "\063\001\001\000\002\001\001\000\016\006\044\022\065" +
    "\023\114\024\060\025\066\027\063\001\001\000\016\006" +
    "\044\022\065\023\113\024\060\025\066\027\063\001\001" +
    "\000\016\006\044\022\065\023\112\024\060\025\066\027" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\132\001\001\000\016\006\044" +
    "\022\065\023\131\024\060\025\066\027\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\044\022\065\023" +
    "\145\024\060\025\066\027\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\150\001\001\000\010\005" +
    "\037\010\042\020\151\001\001\000\014\006\044\021\045" +
    "\022\051\025\053\027\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\155\001\001\000\010\005\037" +
    "\010\042\020\156\001\001\000\014\006\044\021\045\022" +
    "\051\025\053\027\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\044\022\065\023\165\024\060\025\066" +
    "\027\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\044\022\065\023\170\024\060\025\066\026\171" +
    "\027\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\044\022\065\023\175\024\060" +
    "\025\066\027\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\044\022\065\023\177\024\060\025\066" +
    "\027\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\202\001\001\000\010\005\037\010\042\020\203" +
    "\001\001\000\014\006\044\021\045\022\051\025\053\027" +
    "\047\001\001\000\002\001\001\000\004\006\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\206\001\001\000\010\005\037\010\214\013\213" +
    "\001\001\000\006\005\037\010\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CmmParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CmmParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CmmParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    throw new SyntaxErrorException();
    // System.exit(-1);
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CmmParser$actions {
  private final CmmParser parser;

  /** Constructor */
  CUP$CmmParser$actions(CmmParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CmmParser$do_action_part00000000(
    int                        CUP$CmmParser$act_num,
    java_cup.runtime.lr_parser CUP$CmmParser$parser,
    java.util.Stack            CUP$CmmParser$stack,
    int                        CUP$CmmParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CmmParser$result;

      /* select the action based on the action number */
      switch (CUP$CmmParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		AST.ProgramNode start_val = (AST.ProgramNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		RESULT = start_val;
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CmmParser$parser.done_parsing();
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList 
            {
              AST.ProgramNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		LinkedList d = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.ProgramNode(new AST.DeclListNode(d));
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declList ::= declList decl 
            {
              LinkedList RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		LinkedList dl = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.DeclNode d = (AST.DeclNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 dl.addLast(d);
                   RESULT = dl;
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<AST.DeclNode>();
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("declList",1, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= varDecl 
            {
              AST.DeclNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.VarDeclNode v = (AST.VarDeclNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = v;
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= fnDecl 
            {
              AST.DeclNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.FnDeclNode f = (AST.FnDeclNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = f;
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= structDecl 
            {
              AST.DeclNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.StructDeclNode s = (AST.StructDeclNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = s;
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INT 
            {
              AST.TypeNode RESULT =null;
		 RESULT = new AST.IntNode();
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= BOOL 
            {
              AST.TypeNode RESULT =null;
		 RESULT = new AST.BoolNode();
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= VOID 
            {
              AST.TypeNode RESULT =null;
		 RESULT = new AST.VoidNode();
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("type",3, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // id ::= ID 
            {
              AST.IdNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		IdTokenVal i = (IdTokenVal)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.IdNode(i.linenum, i.charnum, i.idVal);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("id",4, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varDeclList ::= varDeclList varDecl 
            {
              LinkedList RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		LinkedList vl = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.VarDeclNode v = (AST.VarDeclNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 vl.addLast(v);
				   RESULT = vl;
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("varDeclList",5, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDeclList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<AST.VarDeclNode>();
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("varDeclList",5, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varDecl ::= type id SEMICOLON 
            {
              AST.VarDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.TypeNode t = (AST.TypeNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		AST.IdNode i = (AST.IdNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = new AST.VarDeclNode(t, i, AST.VarDeclNode.NOT_STRUCT);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("varDecl",6, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varDecl ::= STRUCT id id SEMICOLON 
            {
              AST.VarDeclNode RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.IdNode i1 = (AST.IdNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		AST.IdNode i2 = (AST.IdNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = new AST.VarDeclNode(new AST.StructNode(i1), i2, 0);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("varDecl",6, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-3)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fnDecl ::= type id formals fnBody 
            {
              AST.FnDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-3)).right;
		AST.TypeNode t = (AST.TypeNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.IdNode i = (AST.IdNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		LinkedList f = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.FnBodyNode fb = (AST.FnBodyNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.FnDeclNode(t, i, new AST.FormalsListNode(f), fb);
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("fnDecl",7, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-3)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // structDecl ::= STRUCT id LCURLY structBody RCURLY SEMICOLON 
            {
              AST.StructDeclNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-4)).right;
		AST.IdNode i = (AST.IdNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-4)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		LinkedList sb = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		 RESULT = new AST.StructDeclNode(i, new AST.DeclListNode(sb));
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("structDecl",8, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-5)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // structBody ::= structBody varDecl 
            {
              LinkedList RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		LinkedList sb = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.VarDeclNode v = (AST.VarDeclNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 sb.addLast(v);
				   RESULT = sb;
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("structBody",9, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // structBody ::= varDecl 
            {
              LinkedList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.VarDeclNode v = (AST.VarDeclNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 LinkedList<AST.DeclNode> l = new LinkedList<AST.DeclNode>();
				   l.addLast(v);
				   RESULT = l;
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("structBody",9, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formals ::= LPAREN RPAREN 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<AST.FormalDeclNode>();
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formals ::= LPAREN formalsList RPAREN 
            {
              LinkedList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		LinkedList fl = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = fl;
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("formals",10, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formalsList ::= formalDecl 
            {
              LinkedList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.FormalDeclNode f = (AST.FormalDeclNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 LinkedList<AST.FormalDeclNode> l = new LinkedList<AST.FormalDeclNode>();
				   l.addLast(f);
				   RESULT = l;
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("formalsList",11, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formalsList ::= formalDecl COMMA formalsList 
            {
              LinkedList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.FormalDeclNode f = (AST.FormalDeclNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		LinkedList fl = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 fl.addFirst(f);
				   RESULT = fl;
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("formalsList",11, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formalDecl ::= type id 
            {
              AST.FormalDeclNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		AST.TypeNode t = (AST.TypeNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.IdNode i = (AST.IdNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.FormalDeclNode(t, i);
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("formalDecl",12, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fnBody ::= LCURLY varDeclList stmtList RCURLY 
            {
              AST.FnBodyNode RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		LinkedList vl = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = new AST.FnBodyNode(new AST.DeclListNode(vl), new AST.StmtListNode(sl));
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("fnBody",13, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-3)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmtList ::= stmtList stmt 
            {
              LinkedList RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.StmtNode s = (AST.StmtNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 sl.addLast(s);
				   RESULT = sl;
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmtList ::= 
            {
              LinkedList RESULT =null;
		 RESULT = new LinkedList<AST.StmtNode>();
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("stmtList",14, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= assignExp SEMICOLON 
            {
              AST.StmtNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		AST.ExpNode a = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = new AST.AssignStmtNode((AST.AssignNode)a);
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= loc PLUSPLUS SEMICOLON 
            {
              AST.StmtNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode l = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		 RESULT = new AST.PostIncStmtNode(l);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= loc MINUSMINUS SEMICOLON 
            {
              AST.StmtNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode l = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		 RESULT = new AST.PostDecStmtNode(l);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= CIN READ loc SEMICOLON 
            {
              AST.StmtNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		AST.ExpNode l = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = new AST.ReadStmtNode(l);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-3)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= COUT WRITE exp SEMICOLON 
            {
              AST.StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		AST.ExpNode e = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = new AST.WriteStmtNode(e);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-3)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              AST.StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-5)).right;
		AST.ExpNode e = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-5)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		LinkedList vl = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = new AST.IfStmtNode(e, new AST.DeclListNode(vl), new AST.StmtListNode(sl));
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-7)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY 
            {
              AST.StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-10)).right;
		AST.ExpNode e = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-10)).value;
		int vl1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-7)).left;
		int vl1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-7)).right;
		LinkedList vl1 = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-7)).value;
		int sl1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-6)).left;
		int sl1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-6)).right;
		LinkedList sl1 = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-6)).value;
		int vl2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int vl2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		LinkedList vl2 = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int sl2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int sl2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		LinkedList sl2 = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = new AST.IfElseStmtNode(e, new AST.DeclListNode(vl1), new AST.StmtListNode(sl1), new AST.DeclListNode(vl2), new AST.StmtListNode(sl2));
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-12)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              AST.StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-5)).right;
		AST.ExpNode e = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-5)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		LinkedList vl = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		LinkedList sl = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = new AST.WhileStmtNode(e, new AST.DeclListNode(vl), new AST.StmtListNode(sl));
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-7)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= RETURN exp SEMICOLON 
            {
              AST.StmtNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		AST.ExpNode e = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = new AST.ReturnStmtNode(e);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= RETURN SEMICOLON 
            {
              AST.StmtNode RESULT =null;
		 RESULT = new AST.ReturnStmtNode(null);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= fncall SEMICOLON 
            {
              AST.StmtNode RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		AST.ExpNode fc = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = new AST.CallStmtNode((AST.CallExpNode)fc);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignExp ::= loc ASSIGN exp 
            {
              AST.ExpNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode l = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.AssignNode(l, e);
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("assignExp",16, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= assignExp 
            {
              AST.ExpNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode a = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = a;
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp PLUS exp 
            {
              AST.ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode e1 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e2 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.PlusNode(e1, e2);
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp MINUS exp 
            {
              AST.ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode e1 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e2 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.MinusNode(e1, e2);
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp TIMES exp 
            {
              AST.ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode e1 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e2 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.TimesNode(e1, e2);
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp DIVIDE exp 
            {
              AST.ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode e1 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e2 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.DivideNode(e1, e2);
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= NOT exp 
            {
              AST.ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.NotNode(e);
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp AND exp 
            {
              AST.ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode e1 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e2 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.AndNode(e1, e2);
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp OR exp 
            {
              AST.ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode e1 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e2 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.OrNode(e1, e2);
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp EQUALS exp 
            {
              AST.ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode e1 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e2 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.EqualsNode(e1, e2);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp NOTEQUALS exp 
            {
              AST.ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode e1 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e2 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.NotEqualsNode(e1, e2);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp LESS exp 
            {
              AST.ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode e1 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e2 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.LessNode(e1, e2);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp GREATER exp 
            {
              AST.ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode e1 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e2 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.GreaterNode(e1, e2);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp LESSEQ exp 
            {
              AST.ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode e1 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e2 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.LessEqNode(e1, e2);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp GREATEREQ exp 
            {
              AST.ExpNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode e1 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e2 = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.GreaterEqNode(e1, e2);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= MINUS term 
            {
              AST.ExpNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode t = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.UnaryMinusNode(t);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= term 
            {
              AST.ExpNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode t = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = t;
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("exp",17, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= loc 
            {
              AST.ExpNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode l = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = l;
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= INTLITERAL 
            {
              AST.ExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		IntLitTokenVal i = (IntLitTokenVal)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.IntLitNode(i.linenum, i.charnum, i.intVal);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= STRINGLITERAL 
            {
              AST.ExpNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		StrLitTokenVal s = (StrLitTokenVal)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.StringLitNode(s.linenum, s.charnum, s.strVal);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= TRUE 
            {
              AST.ExpNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		TokenVal t = (TokenVal)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.TrueNode(t.linenum, t.charnum);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= FALSE 
            {
              AST.ExpNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		TokenVal f = (TokenVal)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.FalseNode(f.linenum, f.charnum);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= LPAREN exp RPAREN 
            {
              AST.ExpNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		AST.ExpNode e = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = e;
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // term ::= fncall 
            {
              AST.ExpNode RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode fc = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = fc;
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("term",18, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // fncall ::= id LPAREN RPAREN 
            {
              AST.ExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.IdNode i = (AST.IdNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		 RESULT = new AST.CallExpNode(i);
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // fncall ::= id LPAREN actualList RPAREN 
            {
              AST.ExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-3)).right;
		AST.IdNode i = (AST.IdNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).right;
		LinkedList al = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-1)).value;
		 RESULT = new AST.CallExpNode(i, new AST.ExpListNode(al));
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("fncall",19, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-3)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // actualList ::= exp 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 LinkedList<AST.ExpNode> l = new LinkedList<AST.ExpNode>();
				   l.addLast(e);
				   RESULT = l;
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // actualList ::= actualList COMMA exp 
            {
              LinkedList RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		LinkedList al = (LinkedList)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.ExpNode e = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 al.addLast(e);
                   RESULT = al;
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("actualList",20, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // loc ::= ID 
            {
              AST.ExpNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		IdTokenVal i = (IdTokenVal)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.IdNode(i.linenum, i.charnum, i.idVal);
				
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("loc",21, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // loc ::= loc DOT id 
            {
              AST.ExpNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).right;
		AST.ExpNode l = (AST.ExpNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()).right;
		AST.IdNode i = (AST.IdNode)((java_cup.runtime.Symbol) CUP$CmmParser$stack.peek()).value;
		 RESULT = new AST.DotAccessExpNode(l, i);
                
              CUP$CmmParser$result = parser.getSymbolFactory().newSymbol("loc",21, ((java_cup.runtime.Symbol)CUP$CmmParser$stack.elementAt(CUP$CmmParser$top-2)), ((java_cup.runtime.Symbol)CUP$CmmParser$stack.peek()), RESULT);
            }
          return CUP$CmmParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CmmParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CmmParser$do_action(
    int                        CUP$CmmParser$act_num,
    java_cup.runtime.lr_parser CUP$CmmParser$parser,
    java.util.Stack            CUP$CmmParser$stack,
    int                        CUP$CmmParser$top)
    throws java.lang.Exception
    {
              return CUP$CmmParser$do_action_part00000000(
                               CUP$CmmParser$act_num,
                               CUP$CmmParser$parser,
                               CUP$CmmParser$stack,
                               CUP$CmmParser$top);
    }
}

}
